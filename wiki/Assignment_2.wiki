This page will include a description of the second problem assignment, our implementation and design, and useful things that we've learned.
= Introduction =

Our second programming assignment was to decipher two encrypted files whose characters have all been rotated by some constant.  The most frequently occurring character is used to determine that constant by matching the most frequently occurring character up to the letter 'e'.  So the number or rotations would equal the offset between the letter 'e' and the most frequently occurring character.  For example, if the most frequently occurring character is the letter 'j', then the offset would equal 21 or -5.  Afterwards, all the characters in the encrypted file would have to be rotated by 21 or -5.  More information about the assignment can be found at:  http://www.cs.utexas.edu/~downing/projects/c++/decipher/index.html

= Details =

==Input==

To read in the characters from the 
==Computing the most frequently occurring character==

To compute the most frequently occurring character in the file, we declared an int array of length 26, so each index of the array corresponds to a letter of the alphabet.  The array would store the number of occurrences of each letter.  In addition, our program would ignore case when computing the frequency of each character.  

==Rotation of the text==

   

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages


A description of the problem being solved. You can have a link to the UVa description if you like.

A description of the implementation, in particular what kind of cache did you use, and how was it initialized.

A description of any other design decisions or optimizations.